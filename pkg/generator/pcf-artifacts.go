// Copyright 2018 the Service Broker Project Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package generator

import (
	"bytes"
	"log"
	"text/template"

	"github.com/GoogleCloudPlatform/gcp-service-broker/pkg/config/migration"
	"github.com/GoogleCloudPlatform/gcp-service-broker/utils"
)

const (
	appName         = "gcp-service-broker"
	appDescription  = "A service broker for Google Cloud services."
	stemcellOs      = "ubuntu-xenial"
	stemcellVersion = "456.104"

	buildpack     = "go_buildpack"
	goPackageName = "github.com/GoogleCloudPlatform/gcp-service-broker"
	goVersion     = "go1.14"

	copyrightHeader = `# Copyright the Service Broker Project Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is AUTOGENERATED by ./gcp-service-broker generate, DO NOT EDIT IT.

---`
	manifestYmlTemplate = copyrightHeader + `
applications:
- name: {{.appName}}
  memory: 1G
  buildpack: {{.buildpack}}
  env:
    GOPACKAGENAME: {{.goPackageName}}
    GOVERSION: {{.goVersion}}`
)

// GenerateManifest creates a manifest.yml from a template.
func GenerateManifest() string {
	return runCFTemplate(manifestYmlTemplate)
}

func runCFTemplate(templateString string) string {
	migrator := migration.FullMigration()

	vars := map[string]interface{}{
		"appName":         appName,
		"appVersion":      utils.Version,
		"appDescription":  appDescription,
		"buildpack":       buildpack,
		"goPackageName":   goPackageName,
		"goVersion":       goVersion,
		"stemcellVersion": stemcellVersion,
		"migrationScript": utils.Indent(migrator.TileScript, "  "),
	}

	tmpl, err := template.New("tmpl").Parse(templateString)
	if err != nil {
		log.Fatalf("parsing: %s", err)
	}

	// Run the template to verify the output.
	var buf bytes.Buffer
	err = tmpl.Execute(&buf, vars)
	if err != nil {
		log.Fatalf("execution: %s", err)
	}

	return buf.String()
}
