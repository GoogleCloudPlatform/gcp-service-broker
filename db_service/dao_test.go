// Copyright 2018 the Service Broker Project Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go generate; DO NOT EDIT.

package db_service

import (
	"testing"
	"time"

	"github.com/GoogleCloudPlatform/gcp-service-broker/brokerapi/brokers/models"
	"github.com/jinzhu/gorm"
)

func newInMemoryDatastore(t *testing.T) *SqlDatastore {
	testDb, err := gorm.Open("sqlite3", ":memory:")
	if err != nil {
		t.Fatalf("Error opening test database %s", err)
	}

	testDb.CreateTable(models.ServiceInstanceDetails{})
	testDb.CreateTable(models.CloudOperation{})
	testDb.CreateTable(models.ServiceBindingCredentials{})
	testDb.CreateTable(models.ProvisionRequestDetails{})
	
	return &SqlDatastore{db: testDb}
}

func TestSqlDatastore_ServiceInstanceDetailsDAO(t *testing.T) {
	ds := newInMemoryDatastore(t)
	testPk := string(42)

	instance := models.ServiceInstanceDetails{}
	instance.ID = testPk
	instance.Location = "loc"
	instance.Name = "Hello"
	instance.OrganizationGuid = "1111-1111-1111"
	instance.OtherDetails = "{\"some\":[\"json\",\"blob\",\"here\"]}"
	instance.PlanId = "planid"
	instance.ServiceId = "123-456-7890"
	instance.SpaceGuid = "0000-0000-0000"
	instance.Url = "https://google.com"


	// on startup, there should be no objects to find or delete
	if count, err := ds.CountServiceInstanceDetailsById(testPk); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if _, err := ds.GetServiceInstanceDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing PK got %v", err)
	}

	if _, err := ds.CheckDeletedServiceInstanceDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to check deletion status of a non-existing PK got %v", err)
	}

	if err := ds.DeleteServiceInstanceDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to delete non-existing PK got %v", err)
	}

	// Should be able to create the item
	beforeCreation := time.Now()
	if err := ds.CreateServiceInstanceDetails(&instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetServiceInstanceDetailsById(testPk)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly

	if instance.Location != ret.Location {
		t.Errorf("Expected field Location to be %#v, got %#v", instance.Location, ret.Location)
	}

	if instance.Name != ret.Name {
		t.Errorf("Expected field Name to be %#v, got %#v", instance.Name, ret.Name)
	}

	if instance.OrganizationGuid != ret.OrganizationGuid {
		t.Errorf("Expected field OrganizationGuid to be %#v, got %#v", instance.OrganizationGuid, ret.OrganizationGuid)
	}

	if instance.OtherDetails != ret.OtherDetails {
		t.Errorf("Expected field OtherDetails to be %#v, got %#v", instance.OtherDetails, ret.OtherDetails)
	}

	if instance.PlanId != ret.PlanId {
		t.Errorf("Expected field PlanId to be %#v, got %#v", instance.PlanId, ret.PlanId)
	}

	if instance.ServiceId != ret.ServiceId {
		t.Errorf("Expected field ServiceId to be %#v, got %#v", instance.ServiceId, ret.ServiceId)
	}

	if instance.SpaceGuid != ret.SpaceGuid {
		t.Errorf("Expected field SpaceGuid to be %#v, got %#v", instance.SpaceGuid, ret.SpaceGuid)
	}

	if instance.Url != ret.Url {
		t.Errorf("Expected field Url to be %#v, got %#v", instance.Url, ret.Url)
	}


	// we should be able to update the item and it will have a new updated time
	if err := ds.SaveServiceInstanceDetails(ret); err != nil {
		t.Errorf("Expected no error trying to get update %#v , got: %v", ret, err)
	}

	if !ret.UpdatedAt.After(ret.CreatedAt) {
		t.Errorf("Expected update time to be after create time after update, got update: %#v create: %#v", ret.UpdatedAt, ret.CreatedAt)
	}

	// after deleting the item we should not be able to get it
	deleted, err := ds.CheckDeletedServiceInstanceDetailsById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteServiceInstanceDetailsById(testPk); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedServiceInstanceDetailsById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}

	// after deleting the item we should not be able to get it
	if _, err := ds.GetServiceInstanceDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected ErrRecordNotFound after delete but got %v", err)
	}
}

func TestSqlDatastore_CloudOperationDAO(t *testing.T) {
	ds := newInMemoryDatastore(t)
	testPk := uint(42)

	instance := models.CloudOperation{}
	instance.ID = testPk
	instance.ErrorMessage = "<empty>"
	instance.InsertTime = "1970-01-01T01:01:01Z"
	instance.Name = "cloud-operation-name"
	instance.OperationType = "Delete"
	instance.ServiceId = "1111-1111-1111"
	instance.ServiceInstanceId = "2222-2222-2222"
	instance.StartTime = "1980-01-01T01:01:01Z"
	instance.Status = "DELETED"
	instance.TargetId = "some-uuid-here"
	instance.TargetLink = "https://cloud.google.com/my/target/instance"


	// on startup, there should be no objects to find or delete
	if count, err := ds.CountCloudOperationById(testPk); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if _, err := ds.GetCloudOperationById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing PK got %v", err)
	}

	if _, err := ds.CheckDeletedCloudOperationById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to check deletion status of a non-existing PK got %v", err)
	}

	if err := ds.DeleteCloudOperationById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to delete non-existing PK got %v", err)
	}

	// Should be able to create the item
	beforeCreation := time.Now()
	if err := ds.CreateCloudOperation(&instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetCloudOperationById(testPk)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly

	if instance.ErrorMessage != ret.ErrorMessage {
		t.Errorf("Expected field ErrorMessage to be %#v, got %#v", instance.ErrorMessage, ret.ErrorMessage)
	}

	if instance.InsertTime != ret.InsertTime {
		t.Errorf("Expected field InsertTime to be %#v, got %#v", instance.InsertTime, ret.InsertTime)
	}

	if instance.Name != ret.Name {
		t.Errorf("Expected field Name to be %#v, got %#v", instance.Name, ret.Name)
	}

	if instance.OperationType != ret.OperationType {
		t.Errorf("Expected field OperationType to be %#v, got %#v", instance.OperationType, ret.OperationType)
	}

	if instance.ServiceId != ret.ServiceId {
		t.Errorf("Expected field ServiceId to be %#v, got %#v", instance.ServiceId, ret.ServiceId)
	}

	if instance.ServiceInstanceId != ret.ServiceInstanceId {
		t.Errorf("Expected field ServiceInstanceId to be %#v, got %#v", instance.ServiceInstanceId, ret.ServiceInstanceId)
	}

	if instance.StartTime != ret.StartTime {
		t.Errorf("Expected field StartTime to be %#v, got %#v", instance.StartTime, ret.StartTime)
	}

	if instance.Status != ret.Status {
		t.Errorf("Expected field Status to be %#v, got %#v", instance.Status, ret.Status)
	}

	if instance.TargetId != ret.TargetId {
		t.Errorf("Expected field TargetId to be %#v, got %#v", instance.TargetId, ret.TargetId)
	}

	if instance.TargetLink != ret.TargetLink {
		t.Errorf("Expected field TargetLink to be %#v, got %#v", instance.TargetLink, ret.TargetLink)
	}


	// we should be able to update the item and it will have a new updated time
	if err := ds.SaveCloudOperation(ret); err != nil {
		t.Errorf("Expected no error trying to get update %#v , got: %v", ret, err)
	}

	if !ret.UpdatedAt.After(ret.CreatedAt) {
		t.Errorf("Expected update time to be after create time after update, got update: %#v create: %#v", ret.UpdatedAt, ret.CreatedAt)
	}

	// after deleting the item we should not be able to get it
	deleted, err := ds.CheckDeletedCloudOperationById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteCloudOperationById(testPk); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedCloudOperationById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}

	// after deleting the item we should not be able to get it
	if _, err := ds.GetCloudOperationById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected ErrRecordNotFound after delete but got %v", err)
	}
}

func TestSqlDatastore_ServiceBindingCredentialsDAO(t *testing.T) {
	ds := newInMemoryDatastore(t)
	testPk := uint(42)

	instance := models.ServiceBindingCredentials{}
	instance.ID = testPk
	instance.BindingId = "0000-0000-0000"
	instance.OtherDetails = "{\"some\":[\"json\",\"blob\",\"here\"]}"
	instance.ServiceId = "1111-1111-1111"
	instance.ServiceInstanceId = "2222-2222-2222"


	// on startup, there should be no objects to find or delete
	if count, err := ds.CountServiceBindingCredentialsById(testPk); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if _, err := ds.GetServiceBindingCredentialsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing PK got %v", err)
	}

	if _, err := ds.CheckDeletedServiceBindingCredentialsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to check deletion status of a non-existing PK got %v", err)
	}

	if err := ds.DeleteServiceBindingCredentialsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to delete non-existing PK got %v", err)
	}

	// Should be able to create the item
	beforeCreation := time.Now()
	if err := ds.CreateServiceBindingCredentials(&instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetServiceBindingCredentialsById(testPk)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly

	if instance.BindingId != ret.BindingId {
		t.Errorf("Expected field BindingId to be %#v, got %#v", instance.BindingId, ret.BindingId)
	}

	if instance.OtherDetails != ret.OtherDetails {
		t.Errorf("Expected field OtherDetails to be %#v, got %#v", instance.OtherDetails, ret.OtherDetails)
	}

	if instance.ServiceId != ret.ServiceId {
		t.Errorf("Expected field ServiceId to be %#v, got %#v", instance.ServiceId, ret.ServiceId)
	}

	if instance.ServiceInstanceId != ret.ServiceInstanceId {
		t.Errorf("Expected field ServiceInstanceId to be %#v, got %#v", instance.ServiceInstanceId, ret.ServiceInstanceId)
	}


	// we should be able to update the item and it will have a new updated time
	if err := ds.SaveServiceBindingCredentials(ret); err != nil {
		t.Errorf("Expected no error trying to get update %#v , got: %v", ret, err)
	}

	if !ret.UpdatedAt.After(ret.CreatedAt) {
		t.Errorf("Expected update time to be after create time after update, got update: %#v create: %#v", ret.UpdatedAt, ret.CreatedAt)
	}

	// after deleting the item we should not be able to get it
	deleted, err := ds.CheckDeletedServiceBindingCredentialsById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteServiceBindingCredentialsById(testPk); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedServiceBindingCredentialsById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}

	// after deleting the item we should not be able to get it
	if _, err := ds.GetServiceBindingCredentialsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected ErrRecordNotFound after delete but got %v", err)
	}
}

func TestSqlDatastore_ProvisionRequestDetailsDAO(t *testing.T) {
	ds := newInMemoryDatastore(t)
	testPk := uint(42)

	instance := models.ProvisionRequestDetails{}
	instance.ID = testPk
	instance.RequestDetails = "{\"some\":[\"json\",\"blob\",\"here\"]}"
	instance.ServiceInstanceId = "2222-2222-2222"


	// on startup, there should be no objects to find or delete
	if count, err := ds.CountProvisionRequestDetailsById(testPk); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if _, err := ds.GetProvisionRequestDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing PK got %v", err)
	}

	if _, err := ds.CheckDeletedProvisionRequestDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to check deletion status of a non-existing PK got %v", err)
	}

	if err := ds.DeleteProvisionRequestDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to delete non-existing PK got %v", err)
	}

	// Should be able to create the item
	beforeCreation := time.Now()
	if err := ds.CreateProvisionRequestDetails(&instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetProvisionRequestDetailsById(testPk)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly

	if instance.RequestDetails != ret.RequestDetails {
		t.Errorf("Expected field RequestDetails to be %#v, got %#v", instance.RequestDetails, ret.RequestDetails)
	}

	if instance.ServiceInstanceId != ret.ServiceInstanceId {
		t.Errorf("Expected field ServiceInstanceId to be %#v, got %#v", instance.ServiceInstanceId, ret.ServiceInstanceId)
	}


	// we should be able to update the item and it will have a new updated time
	if err := ds.SaveProvisionRequestDetails(ret); err != nil {
		t.Errorf("Expected no error trying to get update %#v , got: %v", ret, err)
	}

	if !ret.UpdatedAt.After(ret.CreatedAt) {
		t.Errorf("Expected update time to be after create time after update, got update: %#v create: %#v", ret.UpdatedAt, ret.CreatedAt)
	}

	// after deleting the item we should not be able to get it
	deleted, err := ds.CheckDeletedProvisionRequestDetailsById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteProvisionRequestDetailsById(testPk); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedProvisionRequestDetailsById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}

	// after deleting the item we should not be able to get it
	if _, err := ds.GetProvisionRequestDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected ErrRecordNotFound after delete but got %v", err)
	}
}
