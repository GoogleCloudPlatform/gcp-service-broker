// Copyright 2018 the Service Broker Project Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go generate; DO NOT EDIT.

package db_service

import (
	"context"
	"testing"
	"time"

	"github.com/GoogleCloudPlatform/gcp-service-broker/brokerapi/brokers/models"
	"github.com/jinzhu/gorm"
)

func newInMemoryDatastore(t *testing.T) *SqlDatastore {
	testDb, err := gorm.Open("sqlite3", ":memory:")
	if err != nil {
		t.Fatalf("Error opening test database %s", err)
	}

	testDb.CreateTable(models.ServiceInstanceDetails{})
	testDb.CreateTable(models.ServiceBindingCredentials{})
	testDb.CreateTable(models.ProvisionRequestDetails{})
	testDb.CreateTable(models.PlanDetailsV1{})
	testDb.CreateTable(models.TerraformDeployment{})
	
	return &SqlDatastore{db: testDb}
}

func createServiceInstanceDetailsInstance() (string, models.ServiceInstanceDetails) {
	testPk := string(42)

	instance := models.ServiceInstanceDetails{}
	instance.ID = testPk
	instance.Location = "loc"
	instance.Name = "Hello"
	instance.OrganizationGuid = "1111-1111-1111"
	instance.OtherDetails = "{\"some\":[\"json\",\"blob\",\"here\"]}"
	instance.PlanId = "planid"
	instance.ServiceId = "123-456-7890"
	instance.SpaceGuid = "0000-0000-0000"
	instance.Url = "https://google.com"


	return testPk, instance
}

func ensureServiceInstanceDetailsFieldsMatch(t *testing.T, expected, actual *models.ServiceInstanceDetails) {

	if expected.Location != actual.Location {
		t.Errorf("Expected field Location to be %#v, got %#v", expected.Location, actual.Location)
	}

	if expected.Name != actual.Name {
		t.Errorf("Expected field Name to be %#v, got %#v", expected.Name, actual.Name)
	}

	if expected.OrganizationGuid != actual.OrganizationGuid {
		t.Errorf("Expected field OrganizationGuid to be %#v, got %#v", expected.OrganizationGuid, actual.OrganizationGuid)
	}

	if expected.OtherDetails != actual.OtherDetails {
		t.Errorf("Expected field OtherDetails to be %#v, got %#v", expected.OtherDetails, actual.OtherDetails)
	}

	if expected.PlanId != actual.PlanId {
		t.Errorf("Expected field PlanId to be %#v, got %#v", expected.PlanId, actual.PlanId)
	}

	if expected.ServiceId != actual.ServiceId {
		t.Errorf("Expected field ServiceId to be %#v, got %#v", expected.ServiceId, actual.ServiceId)
	}

	if expected.SpaceGuid != actual.SpaceGuid {
		t.Errorf("Expected field SpaceGuid to be %#v, got %#v", expected.SpaceGuid, actual.SpaceGuid)
	}

	if expected.Url != actual.Url {
		t.Errorf("Expected field Url to be %#v, got %#v", expected.Url, actual.Url)
	}

}

func TestSqlDatastore_ServiceInstanceDetailsDAO(t *testing.T) {
	ds := newInMemoryDatastore(t)
	testPk, instance := createServiceInstanceDetailsInstance()
	testCtx := context.Background()

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountServiceInstanceDetailsById(testCtx, testPk); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if _, err := ds.GetServiceInstanceDetailsById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing PK got %v", err)
	}

	if _, err := ds.CheckDeletedServiceInstanceDetailsById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to check deletion status of a non-existing PK got %v", err)
	}

	// Should be able to create the item
	beforeCreation := time.Now()
	if err := ds.CreateServiceInstanceDetails(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetServiceInstanceDetailsById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly
	ensureServiceInstanceDetailsFieldsMatch(t, &instance, ret)

	// we should be able to update the item and it will have a new updated time
	if err := ds.SaveServiceInstanceDetails(testCtx, ret); err != nil {
		t.Errorf("Expected no error trying to get update %#v , got: %v", ret, err)
	}

	if !ret.UpdatedAt.After(ret.CreatedAt) {
		t.Errorf("Expected update time to be after create time after update, got update: %#v create: %#v", ret.UpdatedAt, ret.CreatedAt)
	}

	// after deleting the item we should not be able to get it
	deleted, err := ds.CheckDeletedServiceInstanceDetailsById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteServiceInstanceDetailsById(testCtx, testPk); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedServiceInstanceDetailsById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}

	// after deleting the item we should not be able to get it
	if _, err := ds.GetServiceInstanceDetailsById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected ErrRecordNotFound after delete but got %v", err)
	}
}
func TestSqlDatastore_GetServiceInstanceDetailsById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createServiceInstanceDetailsInstance()
	testCtx := context.Background()

	if _, err := ds.GetServiceInstanceDetailsById(testCtx, instance.ID); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	beforeCreation := time.Now()
	if err := ds.CreateServiceInstanceDetails(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetServiceInstanceDetailsById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly
	ensureServiceInstanceDetailsFieldsMatch(t, &instance, ret)
}

func TestSqlDatastore_CheckDeletedServiceInstanceDetailsById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createServiceInstanceDetailsInstance()
	testCtx := context.Background()

	if _, err := ds.CheckDeletedServiceInstanceDetailsById(testCtx, instance.ID); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	if err := ds.CreateServiceInstanceDetails(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	deleted, err := ds.CheckDeletedServiceInstanceDetailsById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteServiceInstanceDetails(testCtx, &instance); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedServiceInstanceDetailsById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}
}

func TestSqlDatastore_CountServiceInstanceDetailsById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createServiceInstanceDetailsInstance()
	testCtx := context.Background()

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountServiceInstanceDetailsById(testCtx, instance.ID); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if err := ds.CreateServiceInstanceDetails(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountServiceInstanceDetailsById(testCtx, instance.ID); count != 1 || err != nil {
		t.Fatalf("Expected count to be 1 and error to be nil got count: %d, err: %v", count, err)
	}
}


func createServiceBindingCredentialsInstance() (uint, models.ServiceBindingCredentials) {
	testPk := uint(42)

	instance := models.ServiceBindingCredentials{}
	instance.ID = testPk
	instance.BindingId = "0000-0000-0000"
	instance.OtherDetails = "{\"some\":[\"json\",\"blob\",\"here\"]}"
	instance.ServiceId = "1111-1111-1111"
	instance.ServiceInstanceId = "2222-2222-2222"


	return testPk, instance
}

func ensureServiceBindingCredentialsFieldsMatch(t *testing.T, expected, actual *models.ServiceBindingCredentials) {

	if expected.BindingId != actual.BindingId {
		t.Errorf("Expected field BindingId to be %#v, got %#v", expected.BindingId, actual.BindingId)
	}

	if expected.OtherDetails != actual.OtherDetails {
		t.Errorf("Expected field OtherDetails to be %#v, got %#v", expected.OtherDetails, actual.OtherDetails)
	}

	if expected.ServiceId != actual.ServiceId {
		t.Errorf("Expected field ServiceId to be %#v, got %#v", expected.ServiceId, actual.ServiceId)
	}

	if expected.ServiceInstanceId != actual.ServiceInstanceId {
		t.Errorf("Expected field ServiceInstanceId to be %#v, got %#v", expected.ServiceInstanceId, actual.ServiceInstanceId)
	}

}

func TestSqlDatastore_ServiceBindingCredentialsDAO(t *testing.T) {
	ds := newInMemoryDatastore(t)
	testPk, instance := createServiceBindingCredentialsInstance()
	testCtx := context.Background()

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountServiceBindingCredentialsById(testCtx, testPk); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if _, err := ds.GetServiceBindingCredentialsById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing PK got %v", err)
	}

	if _, err := ds.CheckDeletedServiceBindingCredentialsById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to check deletion status of a non-existing PK got %v", err)
	}

	// Should be able to create the item
	beforeCreation := time.Now()
	if err := ds.CreateServiceBindingCredentials(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetServiceBindingCredentialsById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly
	ensureServiceBindingCredentialsFieldsMatch(t, &instance, ret)

	// we should be able to update the item and it will have a new updated time
	if err := ds.SaveServiceBindingCredentials(testCtx, ret); err != nil {
		t.Errorf("Expected no error trying to get update %#v , got: %v", ret, err)
	}

	if !ret.UpdatedAt.After(ret.CreatedAt) {
		t.Errorf("Expected update time to be after create time after update, got update: %#v create: %#v", ret.UpdatedAt, ret.CreatedAt)
	}

	// after deleting the item we should not be able to get it
	deleted, err := ds.CheckDeletedServiceBindingCredentialsById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteServiceBindingCredentialsById(testCtx, testPk); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedServiceBindingCredentialsById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}

	// after deleting the item we should not be able to get it
	if _, err := ds.GetServiceBindingCredentialsById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected ErrRecordNotFound after delete but got %v", err)
	}
}
func TestSqlDatastore_GetServiceBindingCredentialsByServiceInstanceIdAndBindingId(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createServiceBindingCredentialsInstance()
	testCtx := context.Background()

	if _, err := ds.GetServiceBindingCredentialsByServiceInstanceIdAndBindingId(testCtx, instance.ServiceInstanceId, instance.BindingId); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	beforeCreation := time.Now()
	if err := ds.CreateServiceBindingCredentials(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetServiceBindingCredentialsByServiceInstanceIdAndBindingId(testCtx, instance.ServiceInstanceId, instance.BindingId)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly
	ensureServiceBindingCredentialsFieldsMatch(t, &instance, ret)
}

func TestSqlDatastore_CheckDeletedServiceBindingCredentialsByServiceInstanceIdAndBindingId(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createServiceBindingCredentialsInstance()
	testCtx := context.Background()

	if _, err := ds.CheckDeletedServiceBindingCredentialsByServiceInstanceIdAndBindingId(testCtx, instance.ServiceInstanceId, instance.BindingId); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	if err := ds.CreateServiceBindingCredentials(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	deleted, err := ds.CheckDeletedServiceBindingCredentialsByServiceInstanceIdAndBindingId(testCtx, instance.ServiceInstanceId, instance.BindingId)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteServiceBindingCredentials(testCtx, &instance); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedServiceBindingCredentialsByServiceInstanceIdAndBindingId(testCtx, instance.ServiceInstanceId, instance.BindingId)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}
}

func TestSqlDatastore_CountServiceBindingCredentialsByServiceInstanceIdAndBindingId(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createServiceBindingCredentialsInstance()
	testCtx := context.Background()

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountServiceBindingCredentialsByServiceInstanceIdAndBindingId(testCtx, instance.ServiceInstanceId, instance.BindingId); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if err := ds.CreateServiceBindingCredentials(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountServiceBindingCredentialsByServiceInstanceIdAndBindingId(testCtx, instance.ServiceInstanceId, instance.BindingId); count != 1 || err != nil {
		t.Fatalf("Expected count to be 1 and error to be nil got count: %d, err: %v", count, err)
	}
}
func TestSqlDatastore_GetServiceBindingCredentialsByBindingId(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createServiceBindingCredentialsInstance()
	testCtx := context.Background()

	if _, err := ds.GetServiceBindingCredentialsByBindingId(testCtx, instance.BindingId); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	beforeCreation := time.Now()
	if err := ds.CreateServiceBindingCredentials(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetServiceBindingCredentialsByBindingId(testCtx, instance.BindingId)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly
	ensureServiceBindingCredentialsFieldsMatch(t, &instance, ret)
}

func TestSqlDatastore_CheckDeletedServiceBindingCredentialsByBindingId(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createServiceBindingCredentialsInstance()
	testCtx := context.Background()

	if _, err := ds.CheckDeletedServiceBindingCredentialsByBindingId(testCtx, instance.BindingId); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	if err := ds.CreateServiceBindingCredentials(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	deleted, err := ds.CheckDeletedServiceBindingCredentialsByBindingId(testCtx, instance.BindingId)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteServiceBindingCredentials(testCtx, &instance); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedServiceBindingCredentialsByBindingId(testCtx, instance.BindingId)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}
}

func TestSqlDatastore_CountServiceBindingCredentialsByBindingId(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createServiceBindingCredentialsInstance()
	testCtx := context.Background()

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountServiceBindingCredentialsByBindingId(testCtx, instance.BindingId); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if err := ds.CreateServiceBindingCredentials(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountServiceBindingCredentialsByBindingId(testCtx, instance.BindingId); count != 1 || err != nil {
		t.Fatalf("Expected count to be 1 and error to be nil got count: %d, err: %v", count, err)
	}
}
func TestSqlDatastore_GetServiceBindingCredentialsById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createServiceBindingCredentialsInstance()
	testCtx := context.Background()

	if _, err := ds.GetServiceBindingCredentialsById(testCtx, instance.ID); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	beforeCreation := time.Now()
	if err := ds.CreateServiceBindingCredentials(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetServiceBindingCredentialsById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly
	ensureServiceBindingCredentialsFieldsMatch(t, &instance, ret)
}

func TestSqlDatastore_CheckDeletedServiceBindingCredentialsById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createServiceBindingCredentialsInstance()
	testCtx := context.Background()

	if _, err := ds.CheckDeletedServiceBindingCredentialsById(testCtx, instance.ID); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	if err := ds.CreateServiceBindingCredentials(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	deleted, err := ds.CheckDeletedServiceBindingCredentialsById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteServiceBindingCredentials(testCtx, &instance); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedServiceBindingCredentialsById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}
}

func TestSqlDatastore_CountServiceBindingCredentialsById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createServiceBindingCredentialsInstance()
	testCtx := context.Background()

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountServiceBindingCredentialsById(testCtx, instance.ID); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if err := ds.CreateServiceBindingCredentials(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountServiceBindingCredentialsById(testCtx, instance.ID); count != 1 || err != nil {
		t.Fatalf("Expected count to be 1 and error to be nil got count: %d, err: %v", count, err)
	}
}


func createProvisionRequestDetailsInstance() (uint, models.ProvisionRequestDetails) {
	testPk := uint(42)

	instance := models.ProvisionRequestDetails{}
	instance.ID = testPk
	instance.RequestDetails = "{\"some\":[\"json\",\"blob\",\"here\"]}"
	instance.ServiceInstanceId = "2222-2222-2222"


	return testPk, instance
}

func ensureProvisionRequestDetailsFieldsMatch(t *testing.T, expected, actual *models.ProvisionRequestDetails) {

	if expected.RequestDetails != actual.RequestDetails {
		t.Errorf("Expected field RequestDetails to be %#v, got %#v", expected.RequestDetails, actual.RequestDetails)
	}

	if expected.ServiceInstanceId != actual.ServiceInstanceId {
		t.Errorf("Expected field ServiceInstanceId to be %#v, got %#v", expected.ServiceInstanceId, actual.ServiceInstanceId)
	}

}

func TestSqlDatastore_ProvisionRequestDetailsDAO(t *testing.T) {
	ds := newInMemoryDatastore(t)
	testPk, instance := createProvisionRequestDetailsInstance()
	testCtx := context.Background()

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountProvisionRequestDetailsById(testCtx, testPk); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if _, err := ds.GetProvisionRequestDetailsById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing PK got %v", err)
	}

	if _, err := ds.CheckDeletedProvisionRequestDetailsById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to check deletion status of a non-existing PK got %v", err)
	}

	// Should be able to create the item
	beforeCreation := time.Now()
	if err := ds.CreateProvisionRequestDetails(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetProvisionRequestDetailsById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly
	ensureProvisionRequestDetailsFieldsMatch(t, &instance, ret)

	// we should be able to update the item and it will have a new updated time
	if err := ds.SaveProvisionRequestDetails(testCtx, ret); err != nil {
		t.Errorf("Expected no error trying to get update %#v , got: %v", ret, err)
	}

	if !ret.UpdatedAt.After(ret.CreatedAt) {
		t.Errorf("Expected update time to be after create time after update, got update: %#v create: %#v", ret.UpdatedAt, ret.CreatedAt)
	}

	// after deleting the item we should not be able to get it
	deleted, err := ds.CheckDeletedProvisionRequestDetailsById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteProvisionRequestDetailsById(testCtx, testPk); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedProvisionRequestDetailsById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}

	// after deleting the item we should not be able to get it
	if _, err := ds.GetProvisionRequestDetailsById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected ErrRecordNotFound after delete but got %v", err)
	}
}
func TestSqlDatastore_GetProvisionRequestDetailsById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createProvisionRequestDetailsInstance()
	testCtx := context.Background()

	if _, err := ds.GetProvisionRequestDetailsById(testCtx, instance.ID); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	beforeCreation := time.Now()
	if err := ds.CreateProvisionRequestDetails(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetProvisionRequestDetailsById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly
	ensureProvisionRequestDetailsFieldsMatch(t, &instance, ret)
}

func TestSqlDatastore_CheckDeletedProvisionRequestDetailsById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createProvisionRequestDetailsInstance()
	testCtx := context.Background()

	if _, err := ds.CheckDeletedProvisionRequestDetailsById(testCtx, instance.ID); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	if err := ds.CreateProvisionRequestDetails(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	deleted, err := ds.CheckDeletedProvisionRequestDetailsById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteProvisionRequestDetails(testCtx, &instance); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedProvisionRequestDetailsById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}
}

func TestSqlDatastore_CountProvisionRequestDetailsById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createProvisionRequestDetailsInstance()
	testCtx := context.Background()

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountProvisionRequestDetailsById(testCtx, instance.ID); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if err := ds.CreateProvisionRequestDetails(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountProvisionRequestDetailsById(testCtx, instance.ID); count != 1 || err != nil {
		t.Fatalf("Expected count to be 1 and error to be nil got count: %d, err: %v", count, err)
	}
}


func createPlanDetailsV1Instance() (string, models.PlanDetailsV1) {
	testPk := string(42)

	instance := models.PlanDetailsV1{}
	instance.ID = testPk
	instance.Features = "{\"some\":[\"json\",\"blob\",\"here\"]}"
	instance.Name = "service-name"
	instance.ServiceId = "2222-2222-2222"


	return testPk, instance
}

func ensurePlanDetailsV1FieldsMatch(t *testing.T, expected, actual *models.PlanDetailsV1) {

	if expected.Features != actual.Features {
		t.Errorf("Expected field Features to be %#v, got %#v", expected.Features, actual.Features)
	}

	if expected.Name != actual.Name {
		t.Errorf("Expected field Name to be %#v, got %#v", expected.Name, actual.Name)
	}

	if expected.ServiceId != actual.ServiceId {
		t.Errorf("Expected field ServiceId to be %#v, got %#v", expected.ServiceId, actual.ServiceId)
	}

}

func TestSqlDatastore_PlanDetailsV1DAO(t *testing.T) {
	ds := newInMemoryDatastore(t)
	testPk, instance := createPlanDetailsV1Instance()
	testCtx := context.Background()

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountPlanDetailsV1ById(testCtx, testPk); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if _, err := ds.GetPlanDetailsV1ById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing PK got %v", err)
	}

	if _, err := ds.CheckDeletedPlanDetailsV1ById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to check deletion status of a non-existing PK got %v", err)
	}

	// Should be able to create the item
	beforeCreation := time.Now()
	if err := ds.CreatePlanDetailsV1(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetPlanDetailsV1ById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly
	ensurePlanDetailsV1FieldsMatch(t, &instance, ret)

	// we should be able to update the item and it will have a new updated time
	if err := ds.SavePlanDetailsV1(testCtx, ret); err != nil {
		t.Errorf("Expected no error trying to get update %#v , got: %v", ret, err)
	}

	if !ret.UpdatedAt.After(ret.CreatedAt) {
		t.Errorf("Expected update time to be after create time after update, got update: %#v create: %#v", ret.UpdatedAt, ret.CreatedAt)
	}

	// after deleting the item we should not be able to get it
	deleted, err := ds.CheckDeletedPlanDetailsV1ById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeletePlanDetailsV1ById(testCtx, testPk); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedPlanDetailsV1ById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}

	// after deleting the item we should not be able to get it
	if _, err := ds.GetPlanDetailsV1ById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected ErrRecordNotFound after delete but got %v", err)
	}
}
func TestSqlDatastore_GetPlanDetailsV1ByServiceIdAndName(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createPlanDetailsV1Instance()
	testCtx := context.Background()

	if _, err := ds.GetPlanDetailsV1ByServiceIdAndName(testCtx, instance.ServiceId, instance.Name); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	beforeCreation := time.Now()
	if err := ds.CreatePlanDetailsV1(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetPlanDetailsV1ByServiceIdAndName(testCtx, instance.ServiceId, instance.Name)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly
	ensurePlanDetailsV1FieldsMatch(t, &instance, ret)
}

func TestSqlDatastore_CheckDeletedPlanDetailsV1ByServiceIdAndName(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createPlanDetailsV1Instance()
	testCtx := context.Background()

	if _, err := ds.CheckDeletedPlanDetailsV1ByServiceIdAndName(testCtx, instance.ServiceId, instance.Name); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	if err := ds.CreatePlanDetailsV1(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	deleted, err := ds.CheckDeletedPlanDetailsV1ByServiceIdAndName(testCtx, instance.ServiceId, instance.Name)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeletePlanDetailsV1(testCtx, &instance); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedPlanDetailsV1ByServiceIdAndName(testCtx, instance.ServiceId, instance.Name)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}
}

func TestSqlDatastore_CountPlanDetailsV1ByServiceIdAndName(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createPlanDetailsV1Instance()
	testCtx := context.Background()

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountPlanDetailsV1ByServiceIdAndName(testCtx, instance.ServiceId, instance.Name); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if err := ds.CreatePlanDetailsV1(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountPlanDetailsV1ByServiceIdAndName(testCtx, instance.ServiceId, instance.Name); count != 1 || err != nil {
		t.Fatalf("Expected count to be 1 and error to be nil got count: %d, err: %v", count, err)
	}
}
func TestSqlDatastore_GetPlanDetailsV1ById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createPlanDetailsV1Instance()
	testCtx := context.Background()

	if _, err := ds.GetPlanDetailsV1ById(testCtx, instance.ID); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	beforeCreation := time.Now()
	if err := ds.CreatePlanDetailsV1(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetPlanDetailsV1ById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly
	ensurePlanDetailsV1FieldsMatch(t, &instance, ret)
}

func TestSqlDatastore_CheckDeletedPlanDetailsV1ById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createPlanDetailsV1Instance()
	testCtx := context.Background()

	if _, err := ds.CheckDeletedPlanDetailsV1ById(testCtx, instance.ID); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	if err := ds.CreatePlanDetailsV1(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	deleted, err := ds.CheckDeletedPlanDetailsV1ById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeletePlanDetailsV1(testCtx, &instance); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedPlanDetailsV1ById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}
}

func TestSqlDatastore_CountPlanDetailsV1ById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createPlanDetailsV1Instance()
	testCtx := context.Background()

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountPlanDetailsV1ById(testCtx, instance.ID); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if err := ds.CreatePlanDetailsV1(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountPlanDetailsV1ById(testCtx, instance.ID); count != 1 || err != nil {
		t.Fatalf("Expected count to be 1 and error to be nil got count: %d, err: %v", count, err)
	}
}


func createTerraformDeploymentInstance() (string, models.TerraformDeployment) {
	testPk := string(42)

	instance := models.TerraformDeployment{}
	instance.ID = testPk
	instance.LastOperationMessage = "Started 2018-01-01"
	instance.LastOperationState = "in progress"
	instance.LastOperationType = "create"
	instance.Workspace = "{}"


	return testPk, instance
}

func ensureTerraformDeploymentFieldsMatch(t *testing.T, expected, actual *models.TerraformDeployment) {

	if expected.LastOperationMessage != actual.LastOperationMessage {
		t.Errorf("Expected field LastOperationMessage to be %#v, got %#v", expected.LastOperationMessage, actual.LastOperationMessage)
	}

	if expected.LastOperationState != actual.LastOperationState {
		t.Errorf("Expected field LastOperationState to be %#v, got %#v", expected.LastOperationState, actual.LastOperationState)
	}

	if expected.LastOperationType != actual.LastOperationType {
		t.Errorf("Expected field LastOperationType to be %#v, got %#v", expected.LastOperationType, actual.LastOperationType)
	}

	if expected.Workspace != actual.Workspace {
		t.Errorf("Expected field Workspace to be %#v, got %#v", expected.Workspace, actual.Workspace)
	}

}

func TestSqlDatastore_TerraformDeploymentDAO(t *testing.T) {
	ds := newInMemoryDatastore(t)
	testPk, instance := createTerraformDeploymentInstance()
	testCtx := context.Background()

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountTerraformDeploymentById(testCtx, testPk); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if _, err := ds.GetTerraformDeploymentById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing PK got %v", err)
	}

	if _, err := ds.CheckDeletedTerraformDeploymentById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to check deletion status of a non-existing PK got %v", err)
	}

	// Should be able to create the item
	beforeCreation := time.Now()
	if err := ds.CreateTerraformDeployment(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetTerraformDeploymentById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly
	ensureTerraformDeploymentFieldsMatch(t, &instance, ret)

	// we should be able to update the item and it will have a new updated time
	if err := ds.SaveTerraformDeployment(testCtx, ret); err != nil {
		t.Errorf("Expected no error trying to get update %#v , got: %v", ret, err)
	}

	if !ret.UpdatedAt.After(ret.CreatedAt) {
		t.Errorf("Expected update time to be after create time after update, got update: %#v create: %#v", ret.UpdatedAt, ret.CreatedAt)
	}

	// after deleting the item we should not be able to get it
	deleted, err := ds.CheckDeletedTerraformDeploymentById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteTerraformDeploymentById(testCtx, testPk); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedTerraformDeploymentById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}

	// after deleting the item we should not be able to get it
	if _, err := ds.GetTerraformDeploymentById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected ErrRecordNotFound after delete but got %v", err)
	}
}
func TestSqlDatastore_GetTerraformDeploymentById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createTerraformDeploymentInstance()
	testCtx := context.Background()

	if _, err := ds.GetTerraformDeploymentById(testCtx, instance.ID); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	beforeCreation := time.Now()
	if err := ds.CreateTerraformDeployment(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetTerraformDeploymentById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly
	ensureTerraformDeploymentFieldsMatch(t, &instance, ret)
}

func TestSqlDatastore_CheckDeletedTerraformDeploymentById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createTerraformDeploymentInstance()
	testCtx := context.Background()

	if _, err := ds.CheckDeletedTerraformDeploymentById(testCtx, instance.ID); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	if err := ds.CreateTerraformDeployment(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	deleted, err := ds.CheckDeletedTerraformDeploymentById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteTerraformDeployment(testCtx, &instance); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedTerraformDeploymentById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}
}

func TestSqlDatastore_CountTerraformDeploymentById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createTerraformDeploymentInstance()
	testCtx := context.Background()

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountTerraformDeploymentById(testCtx, instance.ID); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if err := ds.CreateTerraformDeployment(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountTerraformDeploymentById(testCtx, instance.ID); count != 1 || err != nil {
		t.Fatalf("Expected count to be 1 and error to be nil got count: %d, err: %v", count, err)
	}
}

