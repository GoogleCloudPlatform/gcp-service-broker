// Copyright 2018 the Service Broker Project Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go generate; DO NOT EDIT.

package db_service

import (
	"github.com/GoogleCloudPlatform/gcp-service-broker/brokerapi/brokers/models"
)

// CountServiceInstanceDetailsById gets the count of ServiceInstanceDetails by id in the datastore (0 or 1)
func CountServiceInstanceDetailsById(pk string) (int, error) { return defaultDatastore().CountServiceInstanceDetailsById(pk) }
func (ds *SqlDatastore) CountServiceInstanceDetailsById(pk string) (int, error) {
	var count int
	err := ds.db.Model(&models.ServiceInstanceDetails{}).Where("id = ?", pk).Count(&count).Error
	return count, err
}

// CreateServiceInstanceDetails creates a new record in the database and assigns it a primary key.
func CreateServiceInstanceDetails(object *models.ServiceInstanceDetails) error { return defaultDatastore().CreateServiceInstanceDetails(object) }
func (ds *SqlDatastore) CreateServiceInstanceDetails(object *models.ServiceInstanceDetails) error {
	return ds.db.Create(object).Error
}

// SaveServiceInstanceDetails updates an existing record in the database.
func SaveServiceInstanceDetails(object *models.ServiceInstanceDetails) error { return defaultDatastore().SaveServiceInstanceDetails(object) }
func (ds *SqlDatastore) SaveServiceInstanceDetails(object *models.ServiceInstanceDetails) error {
	return ds.db.Save(object).Error
}

// DeleteServiceInstanceDetailsById soft-deletes the record.
func DeleteServiceInstanceDetailsById(pk string) error { return defaultDatastore().DeleteServiceInstanceDetailsById(pk) }
func (ds *SqlDatastore) DeleteServiceInstanceDetailsById(pk string) error {
	record, err := ds.GetServiceInstanceDetailsById(pk)
	if err != nil {
		return err
	}

	return ds.DeleteServiceInstanceDetails(record)
}

// DeleteServiceInstanceDetails soft-deletes the record.
func DeleteServiceInstanceDetails(record *models.ServiceInstanceDetails) error { return defaultDatastore().DeleteServiceInstanceDetails(record) }
func (ds *SqlDatastore) DeleteServiceInstanceDetails(record *models.ServiceInstanceDetails) error {
	return ds.db.Delete(record).Error
}

// GetServiceInstanceDetailsById gets an instance of ServiceInstanceDetails by its key (id).
func GetServiceInstanceDetailsById(id string) (*models.ServiceInstanceDetails, error) { return defaultDatastore().GetServiceInstanceDetailsById(id) }
func (ds *SqlDatastore) GetServiceInstanceDetailsById(id string) (*models.ServiceInstanceDetails, error) {
	record := models.ServiceInstanceDetails{}
	if err := ds.db.Where("id = ?", id).First(&record).Error; err != nil {
		return nil, err
	}

	return &record, nil
}

// CheckDeletedServiceInstanceDetailsById checks to see if an instance of ServiceInstanceDetails was soft deleted.
func CheckDeletedServiceInstanceDetailsById(pk string) (bool, error) { return defaultDatastore().CheckDeletedServiceInstanceDetailsById(pk) }
func (ds *SqlDatastore) CheckDeletedServiceInstanceDetailsById(pk string) (bool, error) {
	record := models.ServiceInstanceDetails{}
	if err := ds.db.Unscoped().Where("id = ?", pk).First(&record).Error; err != nil {
		return false, err
	}

	return record.DeletedAt != nil, nil
}

// CountCloudOperationById gets the count of CloudOperation by id in the datastore (0 or 1)
func CountCloudOperationById(pk uint) (int, error) { return defaultDatastore().CountCloudOperationById(pk) }
func (ds *SqlDatastore) CountCloudOperationById(pk uint) (int, error) {
	var count int
	err := ds.db.Model(&models.CloudOperation{}).Where("id = ?", pk).Count(&count).Error
	return count, err
}

// CreateCloudOperation creates a new record in the database and assigns it a primary key.
func CreateCloudOperation(object *models.CloudOperation) error { return defaultDatastore().CreateCloudOperation(object) }
func (ds *SqlDatastore) CreateCloudOperation(object *models.CloudOperation) error {
	return ds.db.Create(object).Error
}

// SaveCloudOperation updates an existing record in the database.
func SaveCloudOperation(object *models.CloudOperation) error { return defaultDatastore().SaveCloudOperation(object) }
func (ds *SqlDatastore) SaveCloudOperation(object *models.CloudOperation) error {
	return ds.db.Save(object).Error
}

// DeleteCloudOperationById soft-deletes the record.
func DeleteCloudOperationById(pk uint) error { return defaultDatastore().DeleteCloudOperationById(pk) }
func (ds *SqlDatastore) DeleteCloudOperationById(pk uint) error {
	record, err := ds.GetCloudOperationById(pk)
	if err != nil {
		return err
	}

	return ds.DeleteCloudOperation(record)
}

// DeleteCloudOperation soft-deletes the record.
func DeleteCloudOperation(record *models.CloudOperation) error { return defaultDatastore().DeleteCloudOperation(record) }
func (ds *SqlDatastore) DeleteCloudOperation(record *models.CloudOperation) error {
	return ds.db.Delete(record).Error
}

// GetCloudOperationByServiceInstanceId gets an instance of CloudOperation by its key (serviceInstanceId).
func GetCloudOperationByServiceInstanceId(serviceInstanceId string) (*models.CloudOperation, error) { return defaultDatastore().GetCloudOperationByServiceInstanceId(serviceInstanceId) }
func (ds *SqlDatastore) GetCloudOperationByServiceInstanceId(serviceInstanceId string) (*models.CloudOperation, error) {
	record := models.CloudOperation{}
	if err := ds.db.Where("service_instance_id = ?", serviceInstanceId).First(&record).Error; err != nil {
		return nil, err
	}

	return &record, nil
}
// GetCloudOperationById gets an instance of CloudOperation by its key (id).
func GetCloudOperationById(id uint) (*models.CloudOperation, error) { return defaultDatastore().GetCloudOperationById(id) }
func (ds *SqlDatastore) GetCloudOperationById(id uint) (*models.CloudOperation, error) {
	record := models.CloudOperation{}
	if err := ds.db.Where("id = ?", id).First(&record).Error; err != nil {
		return nil, err
	}

	return &record, nil
}

// CheckDeletedCloudOperationById checks to see if an instance of CloudOperation was soft deleted.
func CheckDeletedCloudOperationById(pk uint) (bool, error) { return defaultDatastore().CheckDeletedCloudOperationById(pk) }
func (ds *SqlDatastore) CheckDeletedCloudOperationById(pk uint) (bool, error) {
	record := models.CloudOperation{}
	if err := ds.db.Unscoped().Where("id = ?", pk).First(&record).Error; err != nil {
		return false, err
	}

	return record.DeletedAt != nil, nil
}

// CountServiceBindingCredentialsById gets the count of ServiceBindingCredentials by id in the datastore (0 or 1)
func CountServiceBindingCredentialsById(pk uint) (int, error) { return defaultDatastore().CountServiceBindingCredentialsById(pk) }
func (ds *SqlDatastore) CountServiceBindingCredentialsById(pk uint) (int, error) {
	var count int
	err := ds.db.Model(&models.ServiceBindingCredentials{}).Where("id = ?", pk).Count(&count).Error
	return count, err
}

// CreateServiceBindingCredentials creates a new record in the database and assigns it a primary key.
func CreateServiceBindingCredentials(object *models.ServiceBindingCredentials) error { return defaultDatastore().CreateServiceBindingCredentials(object) }
func (ds *SqlDatastore) CreateServiceBindingCredentials(object *models.ServiceBindingCredentials) error {
	return ds.db.Create(object).Error
}

// SaveServiceBindingCredentials updates an existing record in the database.
func SaveServiceBindingCredentials(object *models.ServiceBindingCredentials) error { return defaultDatastore().SaveServiceBindingCredentials(object) }
func (ds *SqlDatastore) SaveServiceBindingCredentials(object *models.ServiceBindingCredentials) error {
	return ds.db.Save(object).Error
}

// DeleteServiceBindingCredentialsById soft-deletes the record.
func DeleteServiceBindingCredentialsById(pk uint) error { return defaultDatastore().DeleteServiceBindingCredentialsById(pk) }
func (ds *SqlDatastore) DeleteServiceBindingCredentialsById(pk uint) error {
	record, err := ds.GetServiceBindingCredentialsById(pk)
	if err != nil {
		return err
	}

	return ds.DeleteServiceBindingCredentials(record)
}

// DeleteServiceBindingCredentials soft-deletes the record.
func DeleteServiceBindingCredentials(record *models.ServiceBindingCredentials) error { return defaultDatastore().DeleteServiceBindingCredentials(record) }
func (ds *SqlDatastore) DeleteServiceBindingCredentials(record *models.ServiceBindingCredentials) error {
	return ds.db.Delete(record).Error
}

// GetServiceBindingCredentialsByServiceInstanceIdAndBindingId gets an instance of ServiceBindingCredentials by its key (serviceInstanceId, bindingId).
func GetServiceBindingCredentialsByServiceInstanceIdAndBindingId(serviceInstanceId string, bindingId string) (*models.ServiceBindingCredentials, error) { return defaultDatastore().GetServiceBindingCredentialsByServiceInstanceIdAndBindingId(serviceInstanceId, bindingId) }
func (ds *SqlDatastore) GetServiceBindingCredentialsByServiceInstanceIdAndBindingId(serviceInstanceId string, bindingId string) (*models.ServiceBindingCredentials, error) {
	record := models.ServiceBindingCredentials{}
	if err := ds.db.Where("service_instance_id = ? AND binding_id = ?", serviceInstanceId, bindingId).First(&record).Error; err != nil {
		return nil, err
	}

	return &record, nil
}
// GetServiceBindingCredentialsByBindingId gets an instance of ServiceBindingCredentials by its key (bindingId).
func GetServiceBindingCredentialsByBindingId(bindingId string) (*models.ServiceBindingCredentials, error) { return defaultDatastore().GetServiceBindingCredentialsByBindingId(bindingId) }
func (ds *SqlDatastore) GetServiceBindingCredentialsByBindingId(bindingId string) (*models.ServiceBindingCredentials, error) {
	record := models.ServiceBindingCredentials{}
	if err := ds.db.Where("binding_id = ?", bindingId).First(&record).Error; err != nil {
		return nil, err
	}

	return &record, nil
}
// GetServiceBindingCredentialsById gets an instance of ServiceBindingCredentials by its key (id).
func GetServiceBindingCredentialsById(id uint) (*models.ServiceBindingCredentials, error) { return defaultDatastore().GetServiceBindingCredentialsById(id) }
func (ds *SqlDatastore) GetServiceBindingCredentialsById(id uint) (*models.ServiceBindingCredentials, error) {
	record := models.ServiceBindingCredentials{}
	if err := ds.db.Where("id = ?", id).First(&record).Error; err != nil {
		return nil, err
	}

	return &record, nil
}

// CheckDeletedServiceBindingCredentialsById checks to see if an instance of ServiceBindingCredentials was soft deleted.
func CheckDeletedServiceBindingCredentialsById(pk uint) (bool, error) { return defaultDatastore().CheckDeletedServiceBindingCredentialsById(pk) }
func (ds *SqlDatastore) CheckDeletedServiceBindingCredentialsById(pk uint) (bool, error) {
	record := models.ServiceBindingCredentials{}
	if err := ds.db.Unscoped().Where("id = ?", pk).First(&record).Error; err != nil {
		return false, err
	}

	return record.DeletedAt != nil, nil
}

// CountProvisionRequestDetailsById gets the count of ProvisionRequestDetails by id in the datastore (0 or 1)
func CountProvisionRequestDetailsById(pk uint) (int, error) { return defaultDatastore().CountProvisionRequestDetailsById(pk) }
func (ds *SqlDatastore) CountProvisionRequestDetailsById(pk uint) (int, error) {
	var count int
	err := ds.db.Model(&models.ProvisionRequestDetails{}).Where("id = ?", pk).Count(&count).Error
	return count, err
}

// CreateProvisionRequestDetails creates a new record in the database and assigns it a primary key.
func CreateProvisionRequestDetails(object *models.ProvisionRequestDetails) error { return defaultDatastore().CreateProvisionRequestDetails(object) }
func (ds *SqlDatastore) CreateProvisionRequestDetails(object *models.ProvisionRequestDetails) error {
	return ds.db.Create(object).Error
}

// SaveProvisionRequestDetails updates an existing record in the database.
func SaveProvisionRequestDetails(object *models.ProvisionRequestDetails) error { return defaultDatastore().SaveProvisionRequestDetails(object) }
func (ds *SqlDatastore) SaveProvisionRequestDetails(object *models.ProvisionRequestDetails) error {
	return ds.db.Save(object).Error
}

// DeleteProvisionRequestDetailsById soft-deletes the record.
func DeleteProvisionRequestDetailsById(pk uint) error { return defaultDatastore().DeleteProvisionRequestDetailsById(pk) }
func (ds *SqlDatastore) DeleteProvisionRequestDetailsById(pk uint) error {
	record, err := ds.GetProvisionRequestDetailsById(pk)
	if err != nil {
		return err
	}

	return ds.DeleteProvisionRequestDetails(record)
}

// DeleteProvisionRequestDetails soft-deletes the record.
func DeleteProvisionRequestDetails(record *models.ProvisionRequestDetails) error { return defaultDatastore().DeleteProvisionRequestDetails(record) }
func (ds *SqlDatastore) DeleteProvisionRequestDetails(record *models.ProvisionRequestDetails) error {
	return ds.db.Delete(record).Error
}

// GetProvisionRequestDetailsByServiceInstanceId gets an instance of ProvisionRequestDetails by its key (serviceInstanceId).
func GetProvisionRequestDetailsByServiceInstanceId(serviceInstanceId string) (*models.ProvisionRequestDetails, error) { return defaultDatastore().GetProvisionRequestDetailsByServiceInstanceId(serviceInstanceId) }
func (ds *SqlDatastore) GetProvisionRequestDetailsByServiceInstanceId(serviceInstanceId string) (*models.ProvisionRequestDetails, error) {
	record := models.ProvisionRequestDetails{}
	if err := ds.db.Where("service_instance_id = ?", serviceInstanceId).First(&record).Error; err != nil {
		return nil, err
	}

	return &record, nil
}
// GetProvisionRequestDetailsById gets an instance of ProvisionRequestDetails by its key (id).
func GetProvisionRequestDetailsById(id uint) (*models.ProvisionRequestDetails, error) { return defaultDatastore().GetProvisionRequestDetailsById(id) }
func (ds *SqlDatastore) GetProvisionRequestDetailsById(id uint) (*models.ProvisionRequestDetails, error) {
	record := models.ProvisionRequestDetails{}
	if err := ds.db.Where("id = ?", id).First(&record).Error; err != nil {
		return nil, err
	}

	return &record, nil
}

// CheckDeletedProvisionRequestDetailsById checks to see if an instance of ProvisionRequestDetails was soft deleted.
func CheckDeletedProvisionRequestDetailsById(pk uint) (bool, error) { return defaultDatastore().CheckDeletedProvisionRequestDetailsById(pk) }
func (ds *SqlDatastore) CheckDeletedProvisionRequestDetailsById(pk uint) (bool, error) {
	record := models.ProvisionRequestDetails{}
	if err := ds.db.Unscoped().Where("id = ?", pk).First(&record).Error; err != nil {
		return false, err
	}

	return record.DeletedAt != nil, nil
}
