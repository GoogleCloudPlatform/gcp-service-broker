// Code generated by counterfeiter. DO NOT EDIT.
package modelsfakes

import (
	"context"
	"sync"

	"github.com/GoogleCloudPlatform/gcp-service-broker/brokerapi/brokers/models"
	"github.com/pivotal-cf/brokerapi"
)

type FakeServiceAccountManager struct {
	CreateCredentialsStub        func(ctx context.Context, instanceID string, bindingID string, details brokerapi.BindDetails, instance models.ServiceInstanceDetails) (models.ServiceBindingCredentials, error)
	createCredentialsMutex       sync.RWMutex
	createCredentialsArgsForCall []struct {
		ctx        context.Context
		instanceID string
		bindingID  string
		details    brokerapi.BindDetails
		instance   models.ServiceInstanceDetails
	}
	createCredentialsReturns struct {
		result1 models.ServiceBindingCredentials
		result2 error
	}
	createCredentialsReturnsOnCall map[int]struct {
		result1 models.ServiceBindingCredentials
		result2 error
	}
	DeleteCredentialsStub        func(ctx context.Context, creds models.ServiceBindingCredentials) error
	deleteCredentialsMutex       sync.RWMutex
	deleteCredentialsArgsForCall []struct {
		ctx   context.Context
		creds models.ServiceBindingCredentials
	}
	deleteCredentialsReturns struct {
		result1 error
	}
	deleteCredentialsReturnsOnCall map[int]struct {
		result1 error
	}
	BuildInstanceCredentialsStub        func(ctx context.Context, bindRecord models.ServiceBindingCredentials, instanceRecord models.ServiceInstanceDetails) (map[string]interface{}, error)
	buildInstanceCredentialsMutex       sync.RWMutex
	buildInstanceCredentialsArgsForCall []struct {
		ctx            context.Context
		bindRecord     models.ServiceBindingCredentials
		instanceRecord models.ServiceInstanceDetails
	}
	buildInstanceCredentialsReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	buildInstanceCredentialsReturnsOnCall map[int]struct {
		result1 map[string]interface{}
		result2 error
	}
	CreateAccountWithRolesStub        func(ctx context.Context, bindingID string, roles []string) (models.ServiceBindingCredentials, error)
	createAccountWithRolesMutex       sync.RWMutex
	createAccountWithRolesArgsForCall []struct {
		ctx       context.Context
		bindingID string
		roles     []string
	}
	createAccountWithRolesReturns struct {
		result1 models.ServiceBindingCredentials
		result2 error
	}
	createAccountWithRolesReturnsOnCall map[int]struct {
		result1 models.ServiceBindingCredentials
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceAccountManager) CreateCredentials(ctx context.Context, instanceID string, bindingID string, details brokerapi.BindDetails, instance models.ServiceInstanceDetails) (models.ServiceBindingCredentials, error) {
	fake.createCredentialsMutex.Lock()
	ret, specificReturn := fake.createCredentialsReturnsOnCall[len(fake.createCredentialsArgsForCall)]
	fake.createCredentialsArgsForCall = append(fake.createCredentialsArgsForCall, struct {
		ctx        context.Context
		instanceID string
		bindingID  string
		details    brokerapi.BindDetails
		instance   models.ServiceInstanceDetails
	}{ctx, instanceID, bindingID, details, instance})
	fake.recordInvocation("CreateCredentials", []interface{}{ctx, instanceID, bindingID, details, instance})
	fake.createCredentialsMutex.Unlock()
	if fake.CreateCredentialsStub != nil {
		return fake.CreateCredentialsStub(ctx, instanceID, bindingID, details, instance)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCredentialsReturns.result1, fake.createCredentialsReturns.result2
}

func (fake *FakeServiceAccountManager) CreateCredentialsCallCount() int {
	fake.createCredentialsMutex.RLock()
	defer fake.createCredentialsMutex.RUnlock()
	return len(fake.createCredentialsArgsForCall)
}

func (fake *FakeServiceAccountManager) CreateCredentialsArgsForCall(i int) (context.Context, string, string, brokerapi.BindDetails, models.ServiceInstanceDetails) {
	fake.createCredentialsMutex.RLock()
	defer fake.createCredentialsMutex.RUnlock()
	return fake.createCredentialsArgsForCall[i].ctx, fake.createCredentialsArgsForCall[i].instanceID, fake.createCredentialsArgsForCall[i].bindingID, fake.createCredentialsArgsForCall[i].details, fake.createCredentialsArgsForCall[i].instance
}

func (fake *FakeServiceAccountManager) CreateCredentialsReturns(result1 models.ServiceBindingCredentials, result2 error) {
	fake.CreateCredentialsStub = nil
	fake.createCredentialsReturns = struct {
		result1 models.ServiceBindingCredentials
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAccountManager) CreateCredentialsReturnsOnCall(i int, result1 models.ServiceBindingCredentials, result2 error) {
	fake.CreateCredentialsStub = nil
	if fake.createCredentialsReturnsOnCall == nil {
		fake.createCredentialsReturnsOnCall = make(map[int]struct {
			result1 models.ServiceBindingCredentials
			result2 error
		})
	}
	fake.createCredentialsReturnsOnCall[i] = struct {
		result1 models.ServiceBindingCredentials
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAccountManager) DeleteCredentials(ctx context.Context, creds models.ServiceBindingCredentials) error {
	fake.deleteCredentialsMutex.Lock()
	ret, specificReturn := fake.deleteCredentialsReturnsOnCall[len(fake.deleteCredentialsArgsForCall)]
	fake.deleteCredentialsArgsForCall = append(fake.deleteCredentialsArgsForCall, struct {
		ctx   context.Context
		creds models.ServiceBindingCredentials
	}{ctx, creds})
	fake.recordInvocation("DeleteCredentials", []interface{}{ctx, creds})
	fake.deleteCredentialsMutex.Unlock()
	if fake.DeleteCredentialsStub != nil {
		return fake.DeleteCredentialsStub(ctx, creds)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteCredentialsReturns.result1
}

func (fake *FakeServiceAccountManager) DeleteCredentialsCallCount() int {
	fake.deleteCredentialsMutex.RLock()
	defer fake.deleteCredentialsMutex.RUnlock()
	return len(fake.deleteCredentialsArgsForCall)
}

func (fake *FakeServiceAccountManager) DeleteCredentialsArgsForCall(i int) (context.Context, models.ServiceBindingCredentials) {
	fake.deleteCredentialsMutex.RLock()
	defer fake.deleteCredentialsMutex.RUnlock()
	return fake.deleteCredentialsArgsForCall[i].ctx, fake.deleteCredentialsArgsForCall[i].creds
}

func (fake *FakeServiceAccountManager) DeleteCredentialsReturns(result1 error) {
	fake.DeleteCredentialsStub = nil
	fake.deleteCredentialsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceAccountManager) DeleteCredentialsReturnsOnCall(i int, result1 error) {
	fake.DeleteCredentialsStub = nil
	if fake.deleteCredentialsReturnsOnCall == nil {
		fake.deleteCredentialsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteCredentialsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceAccountManager) BuildInstanceCredentials(ctx context.Context, bindRecord models.ServiceBindingCredentials, instanceRecord models.ServiceInstanceDetails) (map[string]interface{}, error) {
	fake.buildInstanceCredentialsMutex.Lock()
	ret, specificReturn := fake.buildInstanceCredentialsReturnsOnCall[len(fake.buildInstanceCredentialsArgsForCall)]
	fake.buildInstanceCredentialsArgsForCall = append(fake.buildInstanceCredentialsArgsForCall, struct {
		ctx            context.Context
		bindRecord     models.ServiceBindingCredentials
		instanceRecord models.ServiceInstanceDetails
	}{ctx, bindRecord, instanceRecord})
	fake.recordInvocation("BuildInstanceCredentials", []interface{}{ctx, bindRecord, instanceRecord})
	fake.buildInstanceCredentialsMutex.Unlock()
	if fake.BuildInstanceCredentialsStub != nil {
		return fake.BuildInstanceCredentialsStub(ctx, bindRecord, instanceRecord)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.buildInstanceCredentialsReturns.result1, fake.buildInstanceCredentialsReturns.result2
}

func (fake *FakeServiceAccountManager) BuildInstanceCredentialsCallCount() int {
	fake.buildInstanceCredentialsMutex.RLock()
	defer fake.buildInstanceCredentialsMutex.RUnlock()
	return len(fake.buildInstanceCredentialsArgsForCall)
}

func (fake *FakeServiceAccountManager) BuildInstanceCredentialsArgsForCall(i int) (context.Context, models.ServiceBindingCredentials, models.ServiceInstanceDetails) {
	fake.buildInstanceCredentialsMutex.RLock()
	defer fake.buildInstanceCredentialsMutex.RUnlock()
	return fake.buildInstanceCredentialsArgsForCall[i].ctx, fake.buildInstanceCredentialsArgsForCall[i].bindRecord, fake.buildInstanceCredentialsArgsForCall[i].instanceRecord
}

func (fake *FakeServiceAccountManager) BuildInstanceCredentialsReturns(result1 map[string]interface{}, result2 error) {
	fake.BuildInstanceCredentialsStub = nil
	fake.buildInstanceCredentialsReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAccountManager) BuildInstanceCredentialsReturnsOnCall(i int, result1 map[string]interface{}, result2 error) {
	fake.BuildInstanceCredentialsStub = nil
	if fake.buildInstanceCredentialsReturnsOnCall == nil {
		fake.buildInstanceCredentialsReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
			result2 error
		})
	}
	fake.buildInstanceCredentialsReturnsOnCall[i] = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAccountManager) CreateAccountWithRoles(ctx context.Context, bindingID string, roles []string) (models.ServiceBindingCredentials, error) {
	var rolesCopy []string
	if roles != nil {
		rolesCopy = make([]string, len(roles))
		copy(rolesCopy, roles)
	}
	fake.createAccountWithRolesMutex.Lock()
	ret, specificReturn := fake.createAccountWithRolesReturnsOnCall[len(fake.createAccountWithRolesArgsForCall)]
	fake.createAccountWithRolesArgsForCall = append(fake.createAccountWithRolesArgsForCall, struct {
		ctx       context.Context
		bindingID string
		roles     []string
	}{ctx, bindingID, rolesCopy})
	fake.recordInvocation("CreateAccountWithRoles", []interface{}{ctx, bindingID, rolesCopy})
	fake.createAccountWithRolesMutex.Unlock()
	if fake.CreateAccountWithRolesStub != nil {
		return fake.CreateAccountWithRolesStub(ctx, bindingID, roles)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createAccountWithRolesReturns.result1, fake.createAccountWithRolesReturns.result2
}

func (fake *FakeServiceAccountManager) CreateAccountWithRolesCallCount() int {
	fake.createAccountWithRolesMutex.RLock()
	defer fake.createAccountWithRolesMutex.RUnlock()
	return len(fake.createAccountWithRolesArgsForCall)
}

func (fake *FakeServiceAccountManager) CreateAccountWithRolesArgsForCall(i int) (context.Context, string, []string) {
	fake.createAccountWithRolesMutex.RLock()
	defer fake.createAccountWithRolesMutex.RUnlock()
	return fake.createAccountWithRolesArgsForCall[i].ctx, fake.createAccountWithRolesArgsForCall[i].bindingID, fake.createAccountWithRolesArgsForCall[i].roles
}

func (fake *FakeServiceAccountManager) CreateAccountWithRolesReturns(result1 models.ServiceBindingCredentials, result2 error) {
	fake.CreateAccountWithRolesStub = nil
	fake.createAccountWithRolesReturns = struct {
		result1 models.ServiceBindingCredentials
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAccountManager) CreateAccountWithRolesReturnsOnCall(i int, result1 models.ServiceBindingCredentials, result2 error) {
	fake.CreateAccountWithRolesStub = nil
	if fake.createAccountWithRolesReturnsOnCall == nil {
		fake.createAccountWithRolesReturnsOnCall = make(map[int]struct {
			result1 models.ServiceBindingCredentials
			result2 error
		})
	}
	fake.createAccountWithRolesReturnsOnCall[i] = struct {
		result1 models.ServiceBindingCredentials
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAccountManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createCredentialsMutex.RLock()
	defer fake.createCredentialsMutex.RUnlock()
	fake.deleteCredentialsMutex.RLock()
	defer fake.deleteCredentialsMutex.RUnlock()
	fake.buildInstanceCredentialsMutex.RLock()
	defer fake.buildInstanceCredentialsMutex.RUnlock()
	fake.createAccountWithRolesMutex.RLock()
	defer fake.createAccountWithRolesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceAccountManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ models.ServiceAccountManager = new(FakeServiceAccountManager)
